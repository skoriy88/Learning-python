"""
############################################################################
Инструменты для подключения стандартных потоков ввода­вывода программ без ГИ
к сокетам, которые программы с графическими интерфейсами (и другие)
могут использовать для взаимодействий с программами без ГИ.
############################################################################
"""
import sys
from socket import *
port = 50008         # передать другой порт, если этот
                     # уже занят другой службой
host = 'localhost'   # передать другое имя хоста для подключения
                     # к удаленным слушателям
def initListenerSocket(port=port):
    """
    инициализирует подключенный сокет для вызывающих сценариев,
    которые играют роль сервера
    """
    sock = socket(AF_INET, SOCK_STREAM)
    sock.bind(('', port))       # слушать порт с этим номером
    sock.listen(5)              # длина очереди ожидающих запросов
    conn, addr = sock.accept()  # ждать подключения клиента
    return conn                 # вернуть подключенный сокет
def redirectOut(port=port, host=host):
    """
    подключает стандартный поток вывода вызывающей программы к сокету
    для графического интерфейса, уже ожидающего запуск вызывающей программы,
    иначе попытка соединения потерпит неудачу перед вызовом метода accept
    """
    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect((host, port))  # вызывающий сценарий действует как клиент
    file = sock.makefile('w')   # интерфейс файла: текстовый режим, буфериз.
    sys.stdout = file           # обеспечить вызов sock.send при выводе
    return sock                 # на случай, если вызывающему сценарию
                                # потребуется работать с сокетом напрямую
def redirectIn(port=port, host=host):
    """
    подключает стандартный поток ввода вызывающей программы к сокету
    для получения данных из графического интерфейса
    """
    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect((host, port))
    file = sock.makefile('r')   # обертка с интерфейсом файла
    sys.stdin = file  # обеспечить вызов sock.recv при вводе
    return sock  # возвращаемое значение можно игнорировать


def redirectBothAsClient(port=port, host=host):
    """
    подключает стандартные потоки ввода и вывода вызывающей
    программы к одному и тому же сокету;
    в этом режиме вызывающая программа играет роль клиента:
    отправляет сообщение и получает ответ
    """
    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect((host, port))  # открыть в режиме 'rw'
    ofile = sock.makefile('w')  # интерфейс файла: текстовый режим, буфериз.
    ifile = sock.makefile('r')  # два объекта файла, обертывающих один сокет
    sys.stdout = ofile  # обеспечить вызов sock.send при выводе
    sys.stdin = ifile  # обеспечить вызов sock.recv при вводе
    return sock


def redirectBothAsServer(port=port, host=host):
    """
    подключает стандартные потоки ввода и вывода вызывающей
    программы к одному и тому же сокету;
    в этом режиме вызывающая программа играет роль сервера:
    получает сообщение и отправляет ответ
    """
    sock = socket(AF_INET, SOCK_STREAM)
    sock.bind((host, port))  # вызывающий сценарий ­ сервер
    sock.listen(5)
    conn, addr = sock.accept()
    ofile = conn.makefile('w')  # обертка с интерфейсом файла
    ifile = conn.makefile('r')  # два объекта файла, обертывающих один сокет
    sys.stdout = ofile  # обеспечить вызов sock.send при выводе
    sys.stdin = ifile  # обеспечить вызов sock.recv при вводе
    return conn

